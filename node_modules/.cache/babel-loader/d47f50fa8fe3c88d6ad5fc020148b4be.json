{"ast":null,"code":"import { firebaseConfig } from \"./config\";\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nconst app = firebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const handleSignUp = async (displayName, email, password, confirmPassword) => {\n  let user = null;\n\n  try {\n    if (password === confirmPassword) {\n      user = await auth.createUserWithEmailAndPassword(email, password); // .then(userCredentials => {\n      // user = userCredentials\n\n      handleUserProfile(user.user, {\n        displayName\n      });\n      return user; // }).catch(error => {console.log(error)})\n    } else {\n      throw 'Passwords Do Not Match.';\n    }\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n};\nexport const handleUserProfile = async (userAuth, additionalData) => {\n  // console.log(userAuth)\n  if (!userAuth) return;\n  const {\n    uid\n  } = userAuth; // console.log(`${uid} Storing in firestore database...`)\n\n  const userRef = firestore.doc(`users/${uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const timeStamp = new Date();\n    const userRoles = ['user'];\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdDate: timeStamp,\n        userRoles,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  } // console.log(userRef)\n\n\n  return userRef;\n};\nexport const getSnapshotFromUserAuth = async user => {\n  // console.log(user)\n  const snapshot = await (await handleUserProfile(user)).get(); // console.log(snapshot)\n\n  return snapshot;\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const handleResetPasswordAPI = email => {\n  const config = {\n    url: 'http://localhost:3000/login'\n  };\n  return new Promise((resolve, reject) => {\n    auth.sendPasswordResetEmail(email, config).then(() => {\n      resolve();\n    }).catch(() => {\n      const err = ['Email not found. Please try again.'];\n      reject(err);\n    });\n  });\n};","map":{"version":3,"names":["firebaseConfig","firebase","app","initializeApp","auth","firestore","handleSignUp","displayName","email","password","confirmPassword","user","createUserWithEmailAndPassword","handleUserProfile","err","console","log","userAuth","additionalData","uid","userRef","doc","snapshot","get","exists","timeStamp","Date","userRoles","set","createdDate","getSnapshotFromUserAuth","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","handleResetPasswordAPI","config","url","sendPasswordResetEmail","then","catch"],"sources":["C:/Users/lepau/src/ZOE Inc/zoe-inc-and-associates-project/zoe-inc-and-associates/src/Firebase/utils.js"],"sourcesContent":["import { firebaseConfig } from \"./config\";\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\n\r\nconst app = firebase.initializeApp(firebaseConfig)\r\n\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()\r\n\r\n\r\nexport const handleSignUp = async (displayName, email, password, confirmPassword) => {\r\n\r\n    let user = null\r\n\r\n    try{\r\n      if(password === confirmPassword){\r\n        user = await auth.createUserWithEmailAndPassword(email, password)\r\n        // .then(userCredentials => {\r\n            // user = userCredentials\r\n            handleUserProfile( user.user, { displayName })\r\n            return user\r\n        // }).catch(error => {console.log(error)})\r\n      }else{\r\n          throw 'Passwords Do Not Match.'\r\n      }\r\n    }catch(err){\r\n      console.log(err)\r\n      throw err\r\n    }  \r\n}\r\n\r\n\r\nexport const handleUserProfile = async(userAuth, additionalData) => {\r\n\r\n    // console.log(userAuth)\r\n\r\n    if(!userAuth) return\r\n\r\n    const { uid } = userAuth\r\n\r\n    // console.log(`${uid} Storing in firestore database...`)\r\n\r\n    const userRef = firestore.doc(`users/${uid}`)\r\n\r\n    const snapshot = await userRef.get()\r\n    \r\n\r\n    if(!snapshot.exists){\r\n        const { displayName, email} = userAuth\r\n        const timeStamp = new Date()\r\n        const userRoles = ['user']\r\n        try{\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdDate: timeStamp,\r\n                userRoles,\r\n                ...additionalData\r\n            })\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n    // console.log(userRef)\r\n    \r\n    return userRef\r\n}\r\n\r\nexport const getSnapshotFromUserAuth = async (user) => {\r\n    // console.log(user)\r\n    const snapshot = await (await handleUserProfile(user)).get()\r\n    // console.log(snapshot)\r\n    return snapshot\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n        unsubscribe();\r\n        resolve(userAuth);\r\n      }, reject);\r\n    })\r\n}\r\n\r\nexport const handleResetPasswordAPI = (email) => {\r\n    const config = {\r\n      url: 'http://localhost:3000/login'\r\n    };\r\n  \r\n    return new Promise((resolve, reject) => {\r\n      auth.sendPasswordResetEmail(email, config)\r\n        .then(() => {\r\n          resolve();\r\n        })\r\n        .catch(() => {\r\n          const err = ['Email not found. Please try again.'];\r\n          reject(err);\r\n        });\r\n    });\r\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}